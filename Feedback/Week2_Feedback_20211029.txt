Starting code feedback for Kate, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 0 bytes on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, week3, week2, Feedback, week1

Found the following files in parent directory: README.md, Generating, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
My CMEE Coursework Repository

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, sandbox, results, data

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
    Project name / title: Week 2 CMEE Coursework

    Brief description: Learning to use Python, creating lists, dictionaries, tuples; creating and running  python programmes with control flows; debugging

    Languages: Python


    Project structure and Usage: 
    - lc1.py: using list comprehensions and loops to create lists of latin names, cmmon names and body mass of birds
    - lc2.py: using list comprehensions and loops to creare lists of month, rainfall tuples where rain is more than 100 mm per month and lists of months where rain is less than 50mm.
    -tuple.py: scipt which prints latin name, common name and body mass of birds in "birds" list on seperate lines
    -dictionary.py: a  pyhon script to populate a dictionary derived from  taxa so that it maps order names to sets of taxa.
    -cf1exercises: module containing a set of functions which takes arguments
    -align_seqs.py: a Python program which takes DNA sequences as an input from a single external file and saves the best alignment, along with its corresponding score, in a single text file.

    Author name and contact: Kate Griffin, kate.griffin21@imperial.ac.uk

**********************************************************************

Found following files in results directory: output.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.5

Found 17 code files: cfexercise1.py, debugme.py, lc2.py, cfexercise1_old.py, control_flow.py, loops.py, basic_iol2.py, oaks.py, cfexercise1_test.py, align_seqs.py, basic_iol.py, dictionary.py, basic_iol3.py, tuple.py, boilerplate.py, MyExampleScript.py, lc1.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file cfexercise1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Modify cfexercies.py to make it a module which contains functions (foo_x funtions) which takes argument """

__author__ = 'Kate Griffin (kate.griffin21@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys # module to interface our program with the operating system

# x to the power of 0.5
def foo_1(x):
    """10^0.5"""
    return x ** 0.5 

# only returns higher value of 2 numbers
def foo_2(x, y):
    """Returns higher value: 20 is higher than 10"""
    if x > y:
        return x
    return y

# puts 3 numbers in order from lowest to highest
def foo_3(x, y, z):
    """Puts 3 numbers in order from lowest to highest: 10<20<30"""
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

# ^ Another way of doing it
#def foo_3(x, y, z):
#    if x > y:
#        y,x = x,y
#    if y > z:
#        z,y = y,z
#    return [x, y, z]


# 1*i in a set range over x times
def foo_4(x):
    """1*i in a set range over 10 times"""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

# calculates factorial
def foo_5(x): # a recursive function that calculates the factorial of x
    """Factorial of 10"""
    if x == 1:
        return 1
    return x * foo_5(x - 1)
     

# calculate factorial
def foo_6(x): # Calculate the factorial of x in a different way
    """Factorial of 10"""
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

def main(argv):
    print(foo_1(10))
    print(foo_2(10, 20))
    print(foo_3(10, 20, 30))
    print(foo_4(10))
    print(foo_5(10))
    print(foo_6(10))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
    
**********************************************************************

Testing cfexercise1.py...

cfexercise1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
3.1622776601683795
20
[10, 20, 30]
3628800
3628800
3628800

**********************************************************************

Code ran without errors

Time consumed = 0.07818s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
def buggyfunc(x):
    y = x
    for i in range(x):
        y = y-1
        z = x/y
    return z

buggyfunc(20)
**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 96.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "debugme.py", line 8, in <module>
    buggyfunc(20)
  File "debugme.py", line 5, in buggyfunc
    z = x/y
ZeroDivisionError: division by zero

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.

# If rainfall in mm (i.e., the second element of each tuple [1]) in "rainfall" is greater than 100mm, return value
rain_more_than_100mm = [i for i in rainfall if i[1] > 100] 
print (rain_more_than_100mm)


# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

# If  rainfall in mm (i.e., the second element of each tuple [1]) in "rainfall" is less than 50mm, then print month (i.e., the first element of each tuple [0])
lesss_than_50m = [i[0] for i in rainfall if i[1] < 50] 
print (lesss_than_50m)


# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

# Create a loop which returns values for rainfall in mm (i.e., the second element of each tuple [1]) and month (i.e., the first element of each tuple [0]) if rainfall is greater than 100mm.
for i in rainfall:
    if i[1] > 100:
        print(i)

# Create a loop which returns values for month (i.e., the first element of each tuple [0]) if rainfall in mm (i.e., the second element of each tuple [1]) is less than 50mm.
for i in rainfall:
    if i[1] < 50:
        print(i[0])

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 94.0

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
('JAN', 111.4)
('FEB', 126.1)
('AUG', 140.2)
('NOV', 128.4)
('DEC', 142.2)
MAR
SEP

**********************************************************************

Code ran without errors

Time consumed = 0.07580s

======================================================================
Inspecting script file cfexercise1_old.py...

File contents are:

**********************************************************************
# divides x in half
def foo_1(x):
    return x ** 0.5

# only returns higher value of 2 numbers
def foo_2(x, y):
    if x > y:
        return x
    return y

# puts 3 numbers in order from lowest to highest
def foo_3(x, y, z):
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

# ^ Another way of doing it
def foo_3(x, y, z):
    if x > y:
        y,x = x,y
    if y > z:
        z,y = y,z
    return [x, y, z]


# 1*i in a set range over x times
def foo_4(x):
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

# calculates factorial
def foo_5(x): # a recursive function that calculates the factorial of x
    if x == 1:
        return 1
    return x * foo_5(x - 1)
     

# calculate factorial
def foo_6(x): # Calculate the factorial of x in a different way
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto
    
**********************************************************************

Testing cfexercise1_old.py...

cfexercise1_old.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 88.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.07962s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return "No divisor found for %d!" % x # Each function can return a value or a variable.
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
          print("%d is not a prime: %d is a divisor" % (x, i)) 
          return False
    print("%d is a prime!" % x)
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
      if is_prime(i):
        allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes
      
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 88.0

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.07764s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
# FOR loops
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loop
z = 0
while z < 100:
    z = z + 1
    print(z)


**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 86.0

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********************************************************************

Code ran without errors

Time consumed = 0.08444s

======================================================================
Inspecting script file basic_iol2.py...

File contents are:

**********************************************************************
#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in range(100):
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()

for i in range(6):
    print(i)
**********************************************************************

Testing basic_iol2.py...

basic_iol2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 84.0

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
5

**********************************************************************

Code ran without errors

Time consumed = 0.08513s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 81.5

Output (only first 500 characters): 


**********************************************************************
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'}
{'QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'}

**********************************************************************

Code ran without errors

Time consumed = 0.07910s

======================================================================
Inspecting script file cfexercise1_test.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Modify cfexercies.py to make it a module which contains functions (foo_x funtions) which takes arguments"""

__author__ = 'Kate Griffin (kate.griffin21@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys # module to interface our program with the operating system

# x to the power of 0.5
def foo_1(x):
    """10^0.5"""
    return x ** 0.5 

# only returns higher value of 2 numbers
def foo_2(x, y):
    """Returns higher value: 20 is higher than 10"""
    if x > y:
        return x
    return y

# puts 3 numbers in order from lowest to highest
def foo_3(x, y, z):
    """Puts 3 numbers in order from lowest to highest: 10<20<30"""
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

# ^ Another way of doing it
#def foo_3(x, y, z):
#    if x > y:
#        y,x = x,y
#    if y > z:
#        z,y = y,z
#    return [x, y, z]


# 1*i in a set range over x times
def foo_4(x):
    """1*i in a set range over 10 times"""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

# calculates factorial
def foo_5(x): # a recursive function that calculates the factorial of x
    """Factorial of 10"""
    if x == 1:
        return 1
    return x * foo_5(x - 1)
     

# calculate factorial
def foo_6(x): # Calculate the factorial of x in a different way
    """Factorial of 10"""
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

def main(argv):
    print(foo_1(10))
    print(foo_2(10, 20))
    print(foo_3(10, 20, 30))
    print(foo_4(10))
    print(foo_5(10))
    print(foo_6(10))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
    
**********************************************************************

Testing cfexercise1_test.py...

cfexercise1_test.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 80.5

Output (only first 500 characters): 


**********************************************************************
3.1622776601683795
20
[10, 20, 30]
3628800
3628800
3628800

**********************************************************************

Code ran without errors

Time consumed = 0.08331s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""align DNA sequences"""
__author__ = 'Kate Griffin (kate.griffin21@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

import csv 

# Two example sequences to match
# seq2 = "ATCGCCGGATTACGGG"
# seq1 = "CAATTCGGAT"
# make a function which reads a csv file containing 2 seqs

# read csv file
def read_csv ():
    """read csv file"""
    with open('../data/seqs.csv','r') as f:
        csvread = csv.reader(f)
        temp = []
        for row in csvread:
                temp.append(row)
                print(row)
    seq1 = temp[0][0] #select actual value with both [][]
    seq2 = temp[1][0]
    return(seq1, seq2)
    

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest
def set_length(seq1,seq2):
    """Assign longest and shortest sequence"""
    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths
    
    return s1,s2,l1,l2

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    """Computes a score by returning the number of matches starting from arbitrary startpoint (chosen by the user)"""
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        # import ipdb; ipdb.set_trace()
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"


    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# z= calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
def best_match(s1, s2, l1, l2):
    """Find best match by comparing scores"""
    my_best_align = None
    my_best_score = -1

    for i in range(l1): # Note that you just take the last alignment with the highest score
        z = calculate_score(s1, s2, l1, l2, i)
        if z > my_best_score:
            my_best_align = "." * i + s2 # think about what this is doing!
            my_best_score = z 
    

    print(my_best_align)
    print(s1)
    print("Best score:", my_best_score)

    return(my_best_align, s1, my_best_score)


# function which prints my_best_align in a txt file

# read .csv and return two values, i.e., sequence 1 (seq1) and sequence 2 (seq2). 
# input seq1 and seq2 into "set_length" function, which will return sequence lengths 
# input sequence lengths into "best_match"function to return the best alignment ("my_best_align")
def main(argv):
    seq1, seq2 = read_csv()
    s1, s2, l1, l2= set_length(seq1,seq2)
    my_best_align, s1, my_best_score= best_match(s1, s2, l1, l2)

    f = open("../results/output.txt","w")
    f.write(my_best_align+ "\n")
    f.write(s1+ "\n")
    f.write(str(my_best_score))

    f.close()
    
if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
    



**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 80.0

Output (only first 500 characters): 


**********************************************************************
['ATCGCCGGATTACGGG']
['CAATTCGGAT']
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
ATCGCCGGATTACGGG
2
 
.........
**********************************************************************

Code ran without errors

Time consumed = 0.08311s

======================================================================
Inspecting script file basic_iol.py...

File contents are:

**********************************************************************
#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

**********************************************************************

Testing basic_iol.py...

basic_iol.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 78.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.10261s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc.
#  OR,
# 'Chiroptera': {'Myotis lucifugus'} ... etc

# orders = set([i for i in Rodentia])
# print(orders)
# put lists in for loop for it loops through the orders

# Create a list of "Rodentia" species
Rodentia= []
for i in taxa:
    if i[1] == "Rodentia":
        print(i)
        Rodentia.append(i[0])

# Create a list of "Chiroptera" species
Chiroptera= []
for i in taxa:
    if i[1] == "Chiroptera":
        print(i)
        Chiroptera.append(i[0])

# Create a list of "Afrosoricida" species
Afrosoricida= []
for i in taxa:
    if i[1] == "Afrosoricida":
        print(i)
        Afrosoricida.append(i[0])

# Create a list of "Carnivora" species
Carnivora= []
for i in taxa:
    if i[1] == "Carnivora":
        print(i)
        Carnivora.append(i[0])

# Create a dictionary of orders with a list of species (created in previous for loops)
Orders_and_species = {"Carnivora":Carnivora, "Afrosoricida": Afrosoricida, "Chiroptera":Chiroptera, "Rodentia":Rodentia}
print(Orders_and_species)
**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 76.0

Output (only first 500 characters): 


**********************************************************************
('Gerbillus henleyi', 'Rodentia')
('Peromyscus crinitus', 'Rodentia')
('Mus domesticus', 'Rodentia')
('Cleithrionomys rutilus', 'Rodentia')
('Myotis lucifugus', 'Chiroptera')
('Microgale dobsoni', 'Afrosoricida')
('Microgale talazaci', 'Afrosoricida')
('Lyacon pictus', 'Carnivora')
('Arctocephalus gazella', 'Carnivora')
('Canis lupus', 'Carnivora')
{'Carnivora': ['Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus'], 'Afrosoricida': ['Microgale dobsoni', 'Microgale talazaci'], 'Chiroptera': ['
**********************************************************************

Code ran without errors

Time consumed = 0.07771s

======================================================================
Inspecting script file basic_iol3.py...

File contents are:

**********************************************************************
#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)

**********************************************************************

Testing basic_iol3.py...

basic_iol3.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 74.0

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.08717s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis
# Common name: Savannah sparrow
# Mass: 18.7
# ... etc.

# Hints: use the "print" command! You can use list comprehensions!

# On new lines, print "Latin name" (the first element of each tuple), "common name" (the second element of each tuple) and "body mass" (third element of each tuple)
# The join() method takes all items in an iterable (i.e, a list, string or tuple), which are seperated by a separator, and joins them into one combined string. 
# using an "f" in front of a string (i.e., f string) means all the variables inside the curly brackets are read and replaced with their value (e.g., {birds[i][1]}= the second element (common name) of each tuple in "birds")
# len() returns the number of items in an interable object (lists, strings or tuples)
print('\n...\n'.join([f"Latin name: {birds[i][0]}\ncommon name: {birds[i][1]}\nbody mass: {birds[i][2]}" for i in range(len(birds))]))


# personal notes
###########################
# print latin name, common name and body mass seperately 

# Latin_name, common_name, body_mass = zip(*birds)
# print(Latin_name)
# print(common_name)
# print(body_mass)

# ask about how to get this to work

# print(f"Latin name:{birds[0]}\nCommon name:{birds[1]}\nBody mass:{birds[2]}".format(birds[0],birds[1],birds[2]))
**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 72.0

Output (only first 500 characters): 


**********************************************************************
Latin name: Passerculus sandwichensis
common name: Savannah sparrow
body mass: 18.7
...
Latin name: Delichon urbica
common name: House martin
body mass: 19
...
Latin name: Junco phaeonotus
common name: Yellow-eyed junco
body mass: 19.5
...
Latin name: Junco hyemalis
common name: Dark-eyed junco
body mass: 19.6
...
Latin name: Tachycineata bicolor
common name: Tree swallow
body mass: 20.2

**********************************************************************

Code ran without errors

Time consumed = 0.07810s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Your Name (your@email.address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 72.0

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.08099s

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************

def foo(x):
    x *= x # same as x = x*x
    print(x)

foo(2)
**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 69.5

Output (only first 500 characters): 


**********************************************************************
4

**********************************************************************

Code ran without errors

Time consumed = 0.07608s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
# "birds" is a variable with 5 tuples. Each tuple has three elements (Latin names, common names and body mass)
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

# list all latin names from "birds" list (i.e., i[0]- the first element from each tuple in the "birds" list)
latin_names = [i[0] for i in birds] 
print (latin_names)

# List common names from "birds" list (i.e., i[1]- the second element from each tuple)
common_names = [i[1] for i in birds] 
print (common_names)

# Lists body masses from "birds" list (i.e., i[2]- the third element from each tuple)
body_mass = [i[2] for i in birds] 
print (body_mass)


# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

# Create a loop which returns latin names
# For every tuple in the birds list, print the first element [0]
for bird in birds:
    print(bird[0])

## Create a loop which returns common names
# For every tuple in the birds list, print the second element [1]
for bird in birds:
    print(bird[1])

## Create a loop which returns body mass
# For every tuple in the birds list, print the third element [2]
for bird in birds:
    print(bird[2])

############################
# Alternative solutions
############################
## same as first solution but first prints out each tuple and then print the first element ("latin name")

# for bird in birds:
#     print(f"bird = {bird}")
#     print(f"latin name = {bird[0]}")


## define "latin_names" as a function, whereby for every tuple in birds, return the first value [0]. Useful when using more complicated data (e.g. multiple lists of birds)

# def latin_names(bird_list):
#     for bird in bird_list:
#         print(bird[0])


# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 67.0

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
Passerculus sandwichensis
Delichon urbica
Junco phaeonotus
Junco hyemalis
Tachycineata bicolor
Savannah sparrow
House martin
Yellow-eyed junco
Dark-eyed junco
Tree swallow
18.7
19
19.5
19.6
20.2

**********************************************************************

Code ran without errors

Time consumed = 0.07828s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 67.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!