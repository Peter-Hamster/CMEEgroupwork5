a <-4
a_squared<-a*a
a_squared
v <-c(0,1,2,3,4)
v
is.vector(v)
wing.width.cm <-1.2
wing.length.cm<-c(4.7, 5.2,4.8)
wing.
wing.
?%%
%%?
?%/%
4%%75
10%%2
100%/%2
5!=7
a!=v
a!=4
4>3
2==2
2==1
v & a
x=1
y=2
z=3
x & y
x & x
x!
x!y
x!=y
x <-(1+(2*3)
f(3,4)
v(3,4)
sum(3,4)
x+(y*z)
(x+y)*c
(x + y)*z
{1;2;3}
v[3]
ls
ls()
v
li[[3]]
v[[3]]
v[3]
li=list(c(1,2,3))
class(li)
v <- TRUE
v
class(v)
v<-3.4
class(v)
v<-5
class(v)
v <-2L
class(v)
v<- "A string"
class(v)
b <- NA
class(b)
is.na(b)
b <-0/0
b
is.nan(b)
b <-5/0
b
is.nan(b)
?is.nan
is.infinite(b)
is.finite(b)
is.finite(0/0)
as.interger(3,1)
as.integer(3.1)
as.numeric(4)
as.roman(155)
as.character(155)
class(155)
as.logical(5)
as.logical(0)
x
class(x)
as.interger(x)
as.integer(x)
class(x)
x->as.integer(x)
rx->as.roman(x)
as.roman(x)
as.roman(x) -> y
y
1E10
1E4
1e4
5e-2
1E4^2
1e4^2
1/2/1e8
1/3/1e8
a <-T
a
a <-5
is.vector(a)
v1 <-c(0.002,0.5,1)
v2 <-c("a","bc","def","ghij")
v3<-c(TRUE, TRUE, FALSE)
v1;v2;v3
v1 <-c(0.02, TRUE, 1)
v1
as.character(TRUE)
v1 <-c(0.02, jkk, 1)
v1 <-c(0.02, "jkk", 1)
v1
mat1<-matrix(1:25,5,5)
mat1
mat1<-matrix(1:25,5,5, byrow=TRUE)
mat1
dim(mat1)
arr1<-array(1:50, c(5,5,2))
arr1
arr1[,,1]
arr1[,,2]
print(arr1)
mat1<-matrix(a:c,5,5, byrow=TRUE)
Col1<-1:10
Col1
Col2 <-LETTERS[1:10]
Col2
Col3 <-runif(10)
Col3
MyDF <-data.frame(Col1, Col2, Col3)
MyDF
print(MyDFy)
Print(MyDF)
Print(MyDF)
MyDF
print(MyDF)
names(MyDF) <-c("MyFirstColumn", "MySecondColum", "MyThirdColum")
MyDF
MyDF$MyFirstColumn
colnames(MyDF)
colnames(MyDF)[2] <- "My second Column"
MyDF
MyDF$My second column
colnames(MyDF)[2]<-"MySecondColumn"
MyDF
colnames(MyDF)[3]<-"My.Third.Column"
MyDF$My.Third.Column
MyDF,1]
MyDF[,1]
MyDF[1,]
MyDF[1,1]
MyDF[c("MyFirstColumn","My.Third.Column")]
q()
getwd()
q()
getwd()
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
  # Runs a simulation of the Ricker model
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations)
  {
    N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
  }
  return (N)
}
plot(Ricker(generations=10), type="l")
source("basic_io.R")
MyData <- read.csv("data/trees.csv", header = TRUE) # import with headers
write.csv(MyData, "results/MyData.csv") #write it out as a new file
write.csv(MyData, "results/MyData.csv") #write it out as a new file
write.table(MyData[1,], file = "results/MyData.csv",append=TRUE) # Append to it
write.csv(MyData, "results/MyData.csv", row.names=TRUE) # write row names
write.table(MyData, "results/MyData.csv", col.names=FALSE) # ignore column names
source("basic_io.R")
setwd('code')
getwd()
source("basic_io.R")
MyData <- read.csv("../data/trees.csv", skip = 5) # skip first 5 lines
MyData
source("basic_io.R")
getwd()
source("basic_io.R")MyData <- read.csv("data/trees.csv", header = TRUE) # import with headers
MyData <- read.csv("data/trees.csv", header = TRUE) # import with headers
MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers
write.csv(MyData, "../results/MyData.csv") #write it out as a new file
write.table(MyData[1,], file = "../results/MyData.csv",append=TRUE) # Append to it
write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names
source("basic_io.R")
MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers
ls()
MyData
source"basic_io.R")
source("basic_io.R")
getwd()
q()
